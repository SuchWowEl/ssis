# Form implementation generated from reading ui file 'untitled2.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt
# from PySide6.QtWidgets import QTableView, QApplication, QMessageBox
# from PySide6.QtCore import QAbstractTableModel, Qt, QModelIndex
import pandasway_w_class as pd_obj
import csv
import pandas as pd
import os
from gui_v1 import UI_Dialog

script_dir = os.path.dirname(os.path.abspath(__file__))

studentsFile = os.path.join(script_dir, 'students.csv')
courseFile = os.path.join(script_dir, 'course.csv')
tableStyleSheet = """
            QTableView {
                background-color: rgb(39, 41, 50);
                color: white;
                border: 2px solid rgb(130, 132, 137);
            }
            QHeaderView::section {
                background-color: rgb(39, 41, 50);
                color: white;
            }
            QTableCornerButton::section {
                background-color: rgb(39, 41, 50);
                color: white;
            }
            QHeaderView::section:hover {
                background-color: rgb(241, 234, 208);
                color: rgb(39, 41, 50);
            }
            QTableView::item:hover {
                background-color: rgb(241, 234, 208);
                color: rgb(39, 41, 50);
            }
            QTableView::item:selected {
                background-color: rgb(245, 241, 224);
                color: rgb(39, 41, 50);
            }
        """


class CoursePopUp(QtWidgets.QDialog):
    def __init__(self, parent, courseList, combo_string):
        super().__init__(parent)
        self.setWindowTitle("Choose new Course")
        self.setFixedWidth(200)
        self.setFixedHeight(100)

        layout = QtWidgets.QVBoxLayout()
        self.combobox = QtWidgets.QComboBox()
        self.combobox.addItems(courseList)
        self.combobox.setCurrentText(combo_string)
        layout.addWidget(self.combobox)
        ok_button = QtWidgets.QPushButton("OK")
        layout.addWidget(ok_button)
        ok_button.clicked.connect(self.accept)
        self.setLayout(layout)

    def get_selected_item(self):
        return self.combobox.currentText()


class Functional(UI_Dialog):
    # table_object = pd_obj()
    prevText = ""
    headers = []
    studentModel = QtGui.QStandardItemModel()
    courseModel = QtGui.QStandardItemModel()
    studentsCSV = pd.read_csv(studentsFile)
    courseCSV = pd.read_csv(courseFile)
    courseList = courseCSV['course'].tolist()
    model = QtGui.QStandardItemModel()
    '''1 is for student, 0 for course table'''
    tableMode = 1

    def __init__(self, Dialog):
        super().__init__(Dialog)
        self.setupUI()

    def setFunctions(self):
        self.pushButton.clicked.connect(self.addClicked)
        self.pushButton_3.clicked.connect(self.search_table)
        self.deleteStudentButton.clicked.connect(
            lambda header: self.delete_entry("not course"))
        self.deleteCourseButton.clicked.connect(
            lambda header: self.delete_entry("course"))
        self.addCourseButton.clicked.connect(self.addCourseClicked)
        self.studentModel.itemChanged.connect(
            lambda item, header="": self.edit_cell(item, self.studentModel.headerData(item.column(), Qt.Orientation.Horizontal)))
        self.studentTable.selectionModel().currentChanged.connect(
            self.on_student_selection_changed)
        self.studentTable.clicked.connect(self.set_prev_text)
        self.courseModel.itemChanged.connect(
            lambda item, header="": self.edit_cell(item, self.courseModel.headerData(item.column(), Qt.Orientation.Horizontal)))
        self.courseTable.selectionModel().currentChanged.connect(
            self.on_course_selection_changed)

        self.tabWidget.currentChanged.connect(self.handle_tab_changed)

    def addClicked(self):
        if self.lineEdit_name.text() and self.lineEdit_id.text() and self.comboBox.currentText():
            arrey = [self.lineEdit_name.text(), self.lineEdit_id.text(),
                     self.comboBox.currentText()]
            print(arrey)
            if (not pd_obj.studentInCSV(arrey)):
                pd_obj.addEntry(arrey)

                num_rows = self.studentModel.rowCount()

                self.studentModel.insertRow(num_rows)

                for column in range(self.studentModel.columnCount()):
                    self.prevText = arrey[column]
                    item = QtGui.QStandardItem(arrey[column])
                    self.studentModel.setItem(num_rows, column, item)

                self.studentModel.itemFromIndex(
                    self.studentModel.index(num_rows, 2)).setEditable(False)

    def search_table(self):
        if self.pushButton_3.text() is not None:
            search_string = self.lineEdit_name_3.text()
            # self.studentsCSV = pd.read_csv(studentsFile)
            for row in range(self.studentModel.rowCount()):
                match_found = False
                for column in range(self.studentModel.rowCount()-1):
                    print(
                        f"KOBEEE {self.studentModel.index(row, column).data(0)}")
                    temp = self.studentModel.index(row, column).data(0)
                    if temp is not None and search_string.lower() in temp.strip().lower():
                        match_found = True
                        break
                if match_found:
                    self.studentTable.setRowHidden(row, False)
                else:
                    self.studentTable.setRowHidden(row, True)

    def delete_rows(self, arr, header):
        currentModel = self.studentModel if header != "course" else self.courseModel
        for row in arr:
            currentModel.removeRow(row)

    def delete_entry(self, header):
        print("delete_entry IS CALLED and header is")
        print(header)
        selection_model = self.studentTable.selectionModel(
        ) if header != "course" else self.courseTable.selectionModel()

        selected_indexes = selection_model.selectedIndexes()

        rows_to_remove = []
        for index in selected_indexes:
            if index.column() != 2:
                rows_to_remove.append(index.row())
        rows_to_remove.sort(reverse=True)
        if header != "course":
            print("if header != 'course':")
            pd_obj.deleteEntry(rows_to_remove)
        else:
            print("else:")
            self.delete_rows(rows_to_remove, "course")
            for index in rows_to_remove:
                print(
                    f"index in rows is {index}")
                self.courseList.pop(index)
            # get rows_to_remove for studentTable
            rows_to_remove = sorted(
                pd_obj.deleteCourse(rows_to_remove), reverse=True)
            self.comboBox.clear()
            self.comboBox.addItems(self.courseList)
        self.delete_rows(rows_to_remove, "not course")
        print(self.courseList)

    def modelSetter(self):
        self.headers = list(self.studentsCSV.columns)
        self.studentModel.setHorizontalHeaderLabels(
            self.studentsCSV.columns)

        self.headers2 = list(self.courseCSV.columns)
        self.courseModel.setHorizontalHeaderLabels(self.courseCSV.columns)

    def setModelStudent(self, pdCSV):
        model = QtGui.QStandardItemModel()
        for row in range(len(pdCSV)):
            for column in range(len(pdCSV.columns)):
                item = QtGui.QStandardItem(
                    str(pdCSV.iloc[row, column]))
                model.setItem(row, column, item)
                if column == 2:
                    item.setEditable(False)
        return model

    def addCourseClicked(self):
        print(
            f"{not (self.addCourseLine.text() is None or not self.addCourseLine.text())}")
        print(f"{self.addCourseLine.text() in self.courseList}")
        if not (self.addCourseLine.text() in self.courseList) and not (self.addCourseLine.text() is None or not self.addCourseLine.text()):
            pd_obj.addCourse(self.addCourseLine.text())
            self.courseModel.appendRow(
                [QtGui.QStandardItem(self.addCourseLine.text())])
            self.courseList.append(self.addCourseLine.text())
            self.comboBox.addItem(self.addCourseLine.text())

    def setSModel(self):
        # self.studentsCSV = pd.read_csv(studentsFile)
        # self.courseCSV = pd.read_csv(courseFile)
        self.courseList = self.courseCSV['course'].tolist()

        self.studentModel = self.setModelStudent(self.studentsCSV)
        self.courseModel = self.setModelStudent(self.courseCSV)
        self.modelSetter()

    def printTable(self):
        # if self.tableMode == 1:
        for row in range(self.studentModel.rowCount()):
            for column in range(self.studentModel.columnCount()-1):
                index = self.studentModel.index(row, column)
                item = self.studentModel.itemFromIndex(index)
                print(item.text())
                self.studentModel.setItem(row, column, item)
                if column == 2:
                    item.setEditable(False)
        '''
        for row in range(self.studentModel.rowCount()):
            index = self.studentModel.index(row, 2)
            item = self.studentModel.itemFromIndex(index)
            item.setEditable(False)
        '''

        for row in range(self.courseModel.rowCount()):
            index = self.courseModel.index(row, 0)
            item = self.courseModel.itemFromIndex(index)
            self.courseModel.setItem(row, 0, item)

    def on_student_selection_changed(self, current_index, previous_index):
        column = current_index.column()
        row = current_index.row()
        self.prevText = self.studentModel.data(current_index)
        print(
            f"Selected cell: column={column}, row={row}, text='{self.prevText}'")

    def on_course_selection_changed(self, current_index, previous_index):
        column = current_index.column()
        row = current_index.row()
        self.prevText = self.courseModel.data(current_index)
        print(
            f"Selected cell: column={column}, row={row}, text='{self.prevText}'")

    def handle_tab_changed(self, index):
        index = not index
        elementNum = 0 if index else 0
        # i = 0 for widget in self.tabWidget.widget(index).children(): print(f"{widget.objectName()}: {i}") i += 1 print("-------------------------------")
        previous_tableview = self.tabWidget.widget(index).children()[0]

        previous_tableview.selectionModel().clearSelection()
        previous_tableview.clearFocus()
        self.lineEdit_name.setFocus() if index else self.addCourseLine.setFocus()

    def setComposeTable(self):
        self.setSModel()
        csv_file = open('course.csv', newline='')
        reader = csv.reader(csv_file)
        next(reader)
        items = [row[0] for row in reader]
        self.comboBox.insertItems(1, items)

        self.studentTable.setModel(self.studentModel)
        self.studentTable.horizontalHeader().setSectionResizeMode(
            QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.courseTable.setModel(self.courseModel)
        self.courseTable.horizontalHeader().setSectionResizeMode(
            QtWidgets.QHeaderView.ResizeMode.Stretch)

        self.printTable()

        self.studentTable.setModel(self.studentModel)
        self.studentTable.setStyleSheet(tableStyleSheet)

        self.courseTable.setStyleSheet(tableStyleSheet)

    def editCourseNameinSTable(self, oldInfo, newInfo):
        print("updateCourses called !!!")
        print(self.courseList)

        # edit "course" in student Table when text in that row == oldInfo
        column = 2
        for row in range(self.studentModel.rowCount()):
            index = self.studentModel.index(row, column)
            item = self.studentModel.itemFromIndex(index)
            if item.text() == oldInfo:
                item.setText(newInfo)

        self.comboBox.clear()
        self.comboBox.addItems(self.courseList)

    def edit_cell(self, item, header):
        print("edit_cellllll")
        row = item.row()
        columnNumber = item.column()
        column = self.headers[columnNumber]
        new_text = item.text()
        print(f"new text is {new_text}")
        previous_text = self.prevText if self.prevText != "" else new_text
        inCourse = not pd_obj.notInCSV(new_text, "course", 0)
        inStudent = not pd_obj.notInCSV(new_text, column, 1)
        if previous_text != new_text:
            if new_text != "":
                if header == "course" and not inCourse:
                    print("editCourse")
                    pd_obj.editCourse(previous_text, new_text)
                    self.courseList[row] = self.prevText = new_text
                    self.editCourseNameinSTable(
                        oldInfo=previous_text, newInfo=new_text)
                elif header == "course" and inCourse:
                    print("editCourse failed")
                    self.courseModel.blockSignals(True)
                    self.courseModel.item(
                        row, columnNumber).setText(previous_text)
                    self.courseModel.blockSignals(False)
                elif not inStudent:
                    print("editEntry")
                    pd_obj.editEntry(previous_text,
                                     new_text, column)
                    # pd_obj.editEntry(self, previous_text, new_text, 'course')
                elif inStudent:
                    print("editEntry failed")
                    self.studentModel.blockSignals(True)
                    self.studentModel.item(
                        row, columnNumber).setText(previous_text)
                    self.studentModel.blockSignals(False)
                self.prevText = new_text
                print(f"self.prevText: {self.prevText}")

            else:
                print("text failed")
                print(
                    f"column is {column}, while previous_text is {previous_text}")
                print(f"new_text is {new_text}")
                prevInStudent = not pd_obj.notInCSV(
                    previous_text, column, 1)
                prevInCourse = not pd_obj.notInCSV(
                    previous_text, "course", 0)
                if prevInStudent:
                    self.studentModel.blockSignals(True)
                    self.studentModel.item(
                        row, columnNumber).setText(previous_text)
                    self.studentModel.blockSignals(False)
                elif prevInCourse:
                    self.courseModel.blockSignals(True)
                    self.courseModel.item(
                        row, columnNumber).setText(previous_text)
                    self.courseModel.blockSignals(False)
        print(self.courseList)

    def set_prev_text(self, index):
        if index.column() == 2:
            # self.prevText = index.data()
            dialog = CoursePopUp(Dialog, self.courseList, index.data())
            if dialog.exec() == 1:
                newCourse = dialog.get_selected_item()
                if index.data() != newCourse:
                    idNumber = self.studentTable.model().index(
                        index.row(), index.column()-1).data()
                    pd_obj.editEntryCourse(idNumber, newCourse)
                    self.studentModel.blockSignals(True)
                    item = QtGui.QStandardItem(newCourse)
                    self.studentModel.setItem(index.row(), 2, item)
                    self.studentModel.blockSignals(False)

    def setupUI(self):
        self.setComposeTable()
        self.setFunctions()

        # ----------------------------------------------------------------------------------

        self.label_9 = QtWidgets.QLabel(parent=self.studentTab)
        self.label_9.setGeometry(QtCore.QRect(20, 10, 411, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("color: rgb(245, 241, 224);")
        self.label_9.setObjectName("label_9")
        self.label = QtWidgets.QLabel(parent=self.courseTab)
        self.label.setGeometry(QtCore.QRect(20, 10, 411, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(245, 241, 224);")
        self.label.setObjectName("label")
        self.tabWidget.addTab(self.courseTab, "")

        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        # self.editEntryButton.setText(_translate("Dialog", "EDIT: OFF"))
        self.deleteStudentButton.setText(_translate("Dialog", "DELETE ENTRY"))
        self.label_9.setText(_translate(
            "Dialog", "Simple Student Information System (SSIS)"))
        self.lineEdit_name_3.setPlaceholderText(
            _translate("Dialog", "Enter Name or ID"))
        self.label_8.setText(_translate("Dialog", "  Search"))
        self.pushButton_3.setText(_translate("Dialog", "SEARCH"))
        self.groupBox_4.setTitle(_translate("Dialog", "Add Student"))
        self.lineEdit_name.setPlaceholderText(
            _translate("Dialog", "Enter name of student"))
        self.label_2.setText(_translate("Dialog", "   Name"))
        self.pushButton.setText(_translate("Dialog", "ADD"))
        self.lineEdit_id.setPlaceholderText(
            _translate("Dialog", "Enter ID of student"))
        self.label_4.setText(_translate("Dialog", "       ID"))
        self.label_3.setText(_translate("Dialog", "      Course"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.studentTab), _translate("Dialog", "Student"))
        self.addCourseLine.setPlaceholderText(
            _translate("Dialog", "Add Course"))
        self.courseLabel.setText(_translate("Dialog", "  Course"))
        self.addCourseButton.setText(_translate("Dialog", "ADD"))
        self.label.setText(_translate(
            "Dialog", "Simple Student Information System (SSIS)"))
        # self.editCourseButton.setText(_translate("Dialog", "EDIT: OFF"))
        self.deleteCourseButton.setText(
            _translate("Dialog", "DELETE ENTRY"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.courseTab), _translate("Dialog", "Course"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    # gui = Ui_Dialog(Dialog)
    function_OBJ = Functional(Dialog)
    # ui.setupUI(Dialog)
    Dialog.show()
    sys.exit(app.exec())
